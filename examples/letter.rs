extern crate polydraw;

use polydraw::Application;
use polydraw::devel::{Scene, Poly, DevelRenderer};
use polydraw::geom::point::Point;
use polydraw::draw::RGB;


fn letter_poly() -> Poly {
   let data = [vec![
      (409, 596),
      (529, 232),
      (566, 222),
      (603, 214),
      (640, 208),
      (658, 207),
      (675, 206),
      (710, 208),
      (743, 213),
      (775, 220),
      (806, 231),
      (835, 245),
      (862, 262),
      (887, 282),
      (910, 304),
      (931, 330),
      (950, 358),
      (966, 389),
      (980, 423),
      (991, 460),
      (999, 499),
      (1003, 541),
      (1005, 585),
      (1005, 791),
      (836, 791),
      (791, 792),
      (747, 794),
      (703, 797),
      (660, 801),
      (619, 807),
      (578, 813),
      (538, 821),
      (500, 830),
      (463, 840),
      (426, 852),
      (391, 864),
      (357, 877),
      (325, 892),
      (294, 907),
      (264, 923),
      (235, 941),
      (208, 959),
      (183, 978),
      (159, 999),
      (136, 1020),
      (115, 1042),
      (96, 1064),
      (78, 1088),
      (62, 1112),
      (48, 1138),
      (35, 1164),
      (25, 1190),
      (16, 1218),
      (9, 1246),
      (4, 1275),
      (1, 1305),
      (0, 1335),
      (1, 1361),
      (2, 1387),
      (5, 1412),
      (9, 1436),
      (15, 1459),
      (21, 1481),
      (28, 1502),
      (36, 1523),
      (45, 1543),
      (56, 1562),
      (67, 1580),
      (79, 1598),
      (92, 1614),
      (105, 1630),
      (120, 1645),
      (135, 1659),
      (151, 1673),
      (168, 1685),
      (185, 1697),
      (203, 1708),
      (222, 1717),
      (241, 1727),
      (261, 1735),
      (282, 1742),
      (303, 1749),
      (324, 1754),
      (346, 1759),
      (368, 1763),
      (391, 1766),
      (414, 1768),
      (461, 1770),
      (507, 1768),
      (551, 1764),
      (594, 1756),
      (637, 1746),
      (677, 1734),
      (717, 1720),
      (755, 1704),
      (792, 1686),
      (827, 1667),
      (860, 1648),
      (891, 1628),
      (920, 1607),
      (946, 1586),
      (971, 1566),
      (993, 1546),
      (1012, 1526),
      (1084, 1740),
      (1691, 1740),
      (1691, 1579),
      (1455, 1470),
      (1455, 540),
      (1454, 506),
      (1452, 473),
      (1448, 441),
      (1443, 410),
      (1437, 381),
      (1429, 352),
      (1420, 325),
      (1409, 299),
      (1397, 274),
      (1384, 250),
      (1370, 228),
      (1354, 206),
      (1337, 186),
      (1319, 166),
      (1300, 148),
      (1280, 131),
      (1258, 115),
      (1236, 100),
      (1212, 86),
      (1187, 73),
      (1162, 61),
      (1135, 50),
      (1107, 41),
      (1078, 32),
      (1049, 25),
      (1018, 18),
      (987, 12),
      (955, 8),
      (922, 4),
      (888, 2),
      (853, 0),
      (818, 0),
      (774, 1),
      (728, 3),
      (682, 7),
      (634, 12),
      (586, 18),
      (537, 25),
      (489, 34),
      (441, 43),
      (393, 53),
      (347, 64),
      (302, 76),
      (259, 89),
      (217, 101),
      (178, 115),
      (142, 129),
      (109, 142),
      (109, 596),
   ],
   vec![
      (1001, 1418),
      (952, 1435),
      (926, 1443),
      (899, 1450),
      (870, 1457),
      (840, 1462),
      (809, 1465),
      (776, 1466),
      (746, 1465),
      (716, 1463),
      (688, 1458),
      (660, 1452),
      (634, 1444),
      (610, 1434),
      (587, 1423),
      (566, 1409),
      (547, 1394),
      (530, 1377),
      (515, 1357),
      (503, 1337),
      (493, 1314),
      (486, 1289),
      (482, 1262),
      (480, 1234),
      (480, 1218),
      (482, 1202),
      (484, 1187),
      (487, 1173),
      (491, 1159),
      (496, 1146),
      (501, 1134),
      (507, 1122),
      (514, 1111),
      (522, 1101),
      (530, 1091),
      (540, 1082),
      (560, 1064),
      (583, 1050),
      (608, 1037),
      (635, 1026),
      (665, 1017),
      (697, 1010),
      (730, 1004),
      (765, 1000),
      (802, 998),
      (840, 998),
      (1005, 998),
   ]];

   let outer = points_from_coords(&data[0]);

   let mut inner = Vec::new();

   for inner_data in &data[1..] {
      inner.push(
         points_from_coords(inner_data)
      );
   }

   let poly = Poly::new_with_holes(
      outer, inner, RGB::new(255, 255, 255),
   );

   poly
}

fn points_from_coords(coords: &[(i64, i64)]) -> Vec<Point> {
   let mut points = Vec::new();

   for &(x, y) in coords.iter() {
      points.push(Point::new(x + 120, y + 120))
   }

   points
}

fn main() {
   let mut scene = Scene::new();

   scene.push(Box::new(letter_poly()));

   let mut renderer = DevelRenderer::new(scene);

   Application::new()
      .renderer(&mut renderer)
      .title("Letter")
      .size(1200, 800)
      .run();
}
